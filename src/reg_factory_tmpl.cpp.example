#include <map>
#include <set>
#include <string>

#include <iostream>

/// Abstract factory from template, register classes at runtime.
template <typename T>
class reg_factory
{
public:
    typedef T* (*create_func)();
    
    static void registrate(const std::string& name, reg_factory::create_func func)
    {
        if ( get_registry().end() == get_registry().find(name) )
        {
            get_registry()[name] = func;
        }
    }
    
    static T* create_instance(const std::string& name)
    {
        typename std::map<std::string, reg_factory::create_func>::iterator it = get_registry().find(name);
        return it == get_registry().end() ? NULL : (it->second)();
    }

    static void get_reg_list(std::set<std::string>& outlist)
    {
        outlist.clear();
        typename std::map<std::string, reg_factory::create_func>::iterator it;
        for (it = get_registry().begin(); it != get_registry().end(); it++)
        {
            outlist.insert(it->first);
        }
    }

    template <typename D>
    struct registrator
    {
        registrator(const std::string& name)
        {
            reg_factory::registrate(name, D::create_object);
        }
    private: // disable copy
        registrator(const registrator&);
        void operator=(const registrator&);
    };

protected:    
    static std::map<std::string, reg_factory::create_func>& get_registry()
    {
        static std::map<std::string, reg_factory::create_func> s_registry;
        return s_registry;
    }
};

class tcp_listener
{
public:
    void handle_accept(int sock)
    {
        func_(this, sock);
    }

protected:
    typedef void (*accept_func)(tcp_listener*, int);

    tcp_listener(accept_func func) : func_(func)
    {
    }

private:
    accept_func func_;
};

class server_app
{
public:
    typedef reg_factory<tcp_listener> factory_type;
};

template <typename Listener>
class tcp_listener_impl : public tcp_listener
{
public:
    tcp_listener_impl(Listener lr) : tcp_listener(&tcp_listener_impl::handle_accept_impl), listener_(lr)
    {
    }

    static void handle_accept_impl(tcp_listener* base, int sock)
    {
        tcp_listener_impl<Listener>* lr(static_cast<tcp_listener_impl<Listener>*>(base));
        lr->listener_.handle_accept(sock);
    }

    /// Factory method
    static tcp_listener* create_object()
    {
        Listener lr;
        return new tcp_listener_impl<Listener>(lr);
    }

private:
    Listener listener_;
};

struct sample_listener
{
    void handle_accept(int sock)
    {
        std::cout << "sample impl here --- " <<  sock << "\n";
    }
};

server_app::factory_type::registrator<tcp_listener_impl<sample_listener> > reg("sample");

int main()
{
    tcp_listener* impl = server_app::factory_type::create_instance("sample");
    impl->handle_accept(23);

    return 0;
}


